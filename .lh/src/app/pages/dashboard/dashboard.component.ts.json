{
    "sourceFile": "src/app/pages/dashboard/dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1751612868169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752138893540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, inject, OnInit } from '@angular/core';\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n-import { ResponseModel } from '../../models/login.model';\n+import { ResponseModel, SiteData } from '../../models/login.model';\n \n @Component({\n   selector: 'app-dashboard',\n   imports: [],\n@@ -9,15 +9,16 @@\n   styleUrl: './dashboard.component.css'\n })\n export class DashboardComponent implements OnInit {\n \n+  siteList: SiteData[] = []\n  dashboardService = inject(DashboardService)\n \n   ngOnInit(): void {\n   }\n   \n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n-\n+      this.siteList = res.data\n     })\n   }\n }\n"
                },
                {
                    "date": 1752138961786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   siteList: SiteData[] = []\n  dashboardService = inject(DashboardService)\n \n   ngOnInit(): void {\n+    this.getSites()\n   }\n   \n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n"
                },
                {
                    "date": 1752142662027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,11 @@\n export class DashboardComponent implements OnInit {\n \n   siteList: SiteData[] = []\n  dashboardService = inject(DashboardService)\n+ siteId: string = ''\n+ buildingId: string = ''\n+ floorId: string = ''\n \n   ngOnInit(): void {\n     this.getSites()\n   }\n@@ -21,5 +24,13 @@\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n     })\n   }\n+\n+  getBuildings() {\n+\n+  }\n+\n+  getFloors() {\n+    \n+  }\n }\n"
                },
                {
                    "date": 1752143106635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { Component, inject, OnInit } from '@angular/core';\n+import { DashboardService } from '../../services/dashboard/dashboard.service';\n+import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n+\n+@Component({\n+  selector: 'app-dashboard',\n+  imports: [],\n+  templateUrl: './dashboard.component.html',\n+  styleUrl: './dashboard.component.css'\n+})\n+export class DashboardComponent implements OnInit {\n+\n+  siteList: SiteData[] = []\n+  buildingList: BuildingData[] = []\n+  floorList: FloorData[] = []\n+ dashboardService = inject(DashboardService)\n+ siteId: string = ''\n+ buildingId: string = ''\n+ floorId: string = ''\n+\n+  ngOnInit(): void {\n+    this.getSites()\n+  }\n+  \n+  getSites() {\n+    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n+      this.siteList = res.data\n+    })\n+  }\n+\n+  getBuildings() {\n+    this.dashboardService.getBuildingsBySiteId(this.buildingId).subscribe((res: ResponseModel) => {\n+      this.buildingList = res.data\n+    })\n+  }\n+\n+  getFloors() {\n+    this.dashboardService.getFloorsByBuildingId(this.floorId).subscribe((res: ResponseModel) => {\n+      this.floorList = res.data\n+    })\n+  }\n+}\n"
                },
                {
                    "date": 1752143133189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n import { Component, inject, OnInit } from '@angular/core';\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n+import { FormsModule } from '@angular/forms';\n \n @Component({\n   selector: 'app-dashboard',\n-  imports: [],\n+  imports: [FormsModule],\n   templateUrl: './dashboard.component.html',\n   styleUrl: './dashboard.component.css'\n })\n export class DashboardComponent implements OnInit {\n@@ -39,40 +40,4 @@\n       this.floorList = res.data\n     })\n   }\n }\n-import { Component, inject, OnInit } from '@angular/core';\n-import { DashboardService } from '../../services/dashboard/dashboard.service';\n-import { ResponseModel, SiteData } from '../../models/login.model';\n-\n-@Component({\n-  selector: 'app-dashboard',\n-  imports: [],\n-  templateUrl: './dashboard.component.html',\n-  styleUrl: './dashboard.component.css'\n-})\n-export class DashboardComponent implements OnInit {\n-\n-  siteList: SiteData[] = []\n- dashboardService = inject(DashboardService)\n- siteId: string = ''\n- buildingId: string = ''\n- floorId: string = ''\n-\n-  ngOnInit(): void {\n-    this.getSites()\n-  }\n-  \n-  getSites() {\n-    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n-      this.siteList = res.data\n-    })\n-  }\n-\n-  getBuildings() {\n-\n-  }\n-\n-  getFloors() {\n-    \n-  }\n-}\n"
                },
                {
                    "date": 1752144053515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Component, inject, OnInit } from '@angular/core';\n+import { DashboardService } from '../../services/dashboard/dashboard.service';\n+import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n+import { FormsModule } from '@angular/forms';\n+\n+@Component({\n+  selector: 'app-dashboard',\n+  imports: [FormsModule],\n+  templateUrl: './dashboard.component.html',\n+  styleUrl: './dashboard.component.css'\n+})\n+export class DashboardComponent implements OnInit {\n+\n+  siteList: SiteData[] = []\n+  buildingList: BuildingData[] = []\n+  floorList: FloorData[] = []\n+ dashboardService = inject(DashboardService)\n+ siteId: string = ''\n+ buildingId: string = ''\n+ floorId: string = ''\n+\n+  ngOnInit(): void {\n+    this.getSites()\n+  }\n+  \n+  getSites() {\n+    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n+      this.siteList = res.data\n+    })\n+  }\n+\n+  getBuildings() {\n+    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: ResponseModel) => {\n+      this.buildingList = res.data\n+    })\n+  }\n+\n+  getFloors() {\n+    this.dashboardService.getFloorsByBuildingId(this.floorId).subscribe((res: ResponseModel) => {\n+      this.floorList = res.data\n+    })\n+  }\n+}\n"
                },
                {
                    "date": 1752144460153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,52 +35,9 @@\n     })\n   }\n \n   getFloors() {\n-    this.dashboardService.getFloorsByBuildingId(this.floorId).subscribe((res: ResponseModel) => {\n+    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: ResponseModel) => {\n       this.floorList = res.data\n     })\n   }\n }\n-import { Component, inject, OnInit } from '@angular/core';\n-import { DashboardService } from '../../services/dashboard/dashboard.service';\n-import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n-import { FormsModule } from '@angular/forms';\n-\n-@Component({\n-  selector: 'app-dashboard',\n-  imports: [FormsModule],\n-  templateUrl: './dashboard.component.html',\n-  styleUrl: './dashboard.component.css'\n-})\n-export class DashboardComponent implements OnInit {\n-\n-  siteList: SiteData[] = []\n-  buildingList: BuildingData[] = []\n-  floorList: FloorData[] = []\n- dashboardService = inject(DashboardService)\n- siteId: string = ''\n- buildingId: string = ''\n- floorId: string = ''\n-\n-  ngOnInit(): void {\n-    this.getSites()\n-  }\n-  \n-  getSites() {\n-    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n-      this.siteList = res.data\n-    })\n-  }\n-\n-  getBuildings() {\n-    this.dashboardService.getBuildingsBySiteId(this.buildingId).subscribe((res: ResponseModel) => {\n-      this.buildingList = res.data\n-    })\n-  }\n-\n-  getFloors() {\n-    this.dashboardService.getFloorsByBuildingId(this.floorId).subscribe((res: ResponseModel) => {\n-      this.floorList = res.data\n-    })\n-  }\n-}\n"
                },
                {
                    "date": 1752144759401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,15 @@\n  buildingId: string = ''\n  floorId: string = ''\n \n   ngOnInit(): void {\n-    this.getSites()\n+    if (this.dashboardService.loginService.loggedUserData) {\n+    this.getSites();\n+  } else {\n+    // Optionally redirect to login or show a message\n+    this.router.navigate(['/login']);\n   }\n+  }\n   \n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n"
                },
                {
                    "date": 1752144866864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Component, inject, OnInit } from '@angular/core';\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n import { FormsModule } from '@angular/forms';\n+import { Router } from '@angular/router';\n \n @Component({\n   selector: 'app-dashboard',\n   imports: [FormsModule],\n@@ -10,8 +11,9 @@\n   styleUrl: './dashboard.component.css'\n })\n export class DashboardComponent implements OnInit {\n \n+  router = inject(Router)\n   siteList: SiteData[] = []\n   buildingList: BuildingData[] = []\n   floorList: FloorData[] = []\n  dashboardService = inject(DashboardService)\n"
                },
                {
                    "date": 1752144888032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n  siteId: string = ''\n  buildingId: string = ''\n  floorId: string = ''\n \n-  ngOnInit(): void {\n+  ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n     this.getSites();\n   } else {\n     // Optionally redirect to login or show a message\n"
                },
                {
                    "date": 1752145157715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import { Component, inject, OnInit } from '@angular/core';\n+import { DashboardService } from '../../services/dashboard/dashboard.service';\n+import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n+import { FormsModule } from '@angular/forms';\n+import { Router } from '@angular/router';\n+\n+@Component({\n+  selector: 'app-dashboard',\n+  imports: [FormsModule],\n+  templateUrl: './dashboard.component.html',\n+  styleUrl: './dashboard.component.css'\n+})\n+export class DashboardComponent implements OnInit {\n+\n+  router = inject(Router)\n+  siteList: SiteData[] = []\n+  buildingList: BuildingData[] = []\n+  floorList: FloorData[] = []\n+ dashboardService = inject(DashboardService)\n+ siteId: string = ''\n+ buildingId: string = ''\n+ floorId: string = ''\n+\n+  ngOnInit() {\n+    if (this.dashboardService.loginService.loggedUserData) {\n+    this.getSites();\n+  } else {\n+    // Optionally redirect to login or show a message\n+    this.router.navigate(['/login']);\n+  }\n+  }\n+  \n+  getSites() {\n+    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n+      this.siteList = res.data\n+    })\n+  }\n+\n+  getBuildings() {\n+    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: ResponseModel) => {\n+      this.buildingList = res.data\n+    })\n+  }\n+\n+  getFloors() {\n+    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: ResponseModel) => {\n+      this.floorList = res.data\n+    })\n+  }\n+}\n"
                },
                {
                    "date": 1752145192302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,65 +36,15 @@\n     })\n   }\n \n   getBuildings() {\n-    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: ResponseModel) => {\n+    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: any) => {\n       this.buildingList = res.data\n     })\n   }\n \n   getFloors() {\n-    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: ResponseModel) => {\n+    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: any) => {\n       this.floorList = res.data\n     })\n   }\n }\n-import { Component, inject, OnInit } from '@angular/core';\n-import { DashboardService } from '../../services/dashboard/dashboard.service';\n-import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n-import { FormsModule } from '@angular/forms';\n-import { Router } from '@angular/router';\n-\n-@Component({\n-  selector: 'app-dashboard',\n-  imports: [FormsModule],\n-  templateUrl: './dashboard.component.html',\n-  styleUrl: './dashboard.component.css'\n-})\n-export class DashboardComponent implements OnInit {\n-\n-  router = inject(Router)\n-  siteList: SiteData[] = []\n-  buildingList: BuildingData[] = []\n-  floorList: FloorData[] = []\n- dashboardService = inject(DashboardService)\n- siteId: string = ''\n- buildingId: string = ''\n- floorId: string = ''\n-\n-  ngOnInit() {\n-    if (this.dashboardService.loginService.loggedUserData) {\n-    this.getSites();\n-  } else {\n-    // Optionally redirect to login or show a message\n-    this.router.navigate(['/login']);\n-  }\n-  }\n-  \n-  getSites() {\n-    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n-      this.siteList = res.data\n-    })\n-  }\n-\n-  getBuildings() {\n-    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: ResponseModel) => {\n-      this.buildingList = res.data\n-    })\n-  }\n-\n-  getFloors() {\n-    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: ResponseModel) => {\n-      this.floorList = res.data\n-    })\n-  }\n-}\n"
                },
                {
                    "date": 1752234178867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n  dashboardService = inject(DashboardService)\n  siteId: string = ''\n  buildingId: string = ''\n  floorId: string = ''\n+ parkingSpotArray: number[] = []\n \n   ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n     this.getSites();\n@@ -46,5 +47,14 @@\n     this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: any) => {\n       this.floorList = res.data\n     })\n   }\n+\n+  onSelectFloor() {\n+    const floor = this.floorList.find((m: any) => m.floorId == this.floorId);\n+    if (floor) {\n+      for (let index = 1; index <= floor.totalParkingSpots; index++) {\n+        this.parkingSpotArray.push(index);\n+      }\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1752305443704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, inject, OnInit } from '@angular/core';\n+import { Component, ElementRef, inject, OnInit, viewChild } from '@angular/core';\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n import { FormsModule } from '@angular/forms';\n import { Router } from '@angular/router';\n@@ -21,8 +21,12 @@\n  buildingId: string = ''\n  floorId: string = ''\n  parkingSpotArray: number[] = []\n \n+//  in angular there are many ways to open modal but viewchild is considered to be best one\n+@viewChild(\"bookSpot\") bookModal!: ElementRef;\n+// lets add ! because we dont want to initalize it\n+\n   ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n     this.getSites();\n   } else {\n@@ -56,5 +60,12 @@\n         this.parkingSpotArray.push(index);\n       }\n     }\n   }\n+\n+  openModal() {\n+    // whenever we are dealing with the viewchild use null check\n+    if(this.bookModal) {\n+      this.bookModal.nativeElement.style.display = 'block';\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1752305470828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,12 @@\n     if(this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n   }\n+\n+  closeModal() {\n+    // whenever we are dealing with the viewchild use null check\n+    if(this.bookModal) {\n+      this.bookModal.nativeElement.style.display = 'none';\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1752305525646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n   }\n \n-  closeModal() {\n+  closeModal(spotNumber: number) {\n     // whenever we are dealing with the viewchild use null check\n     if(this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n"
                },
                {
                    "date": 1752305602889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, ElementRef, inject, OnInit, viewChild } from '@angular/core';\n+import { Component, ElementRef, inject, OnInit, ViewChild } from '@angular/core';\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n import { FormsModule } from '@angular/forms';\n import { Router } from '@angular/router';\n@@ -22,9 +22,9 @@\n  floorId: string = ''\n  parkingSpotArray: number[] = []\n \n //  in angular there are many ways to open modal but viewchild is considered to be best one\n-@viewChild(\"bookSpot\") bookModal!: ElementRef;\n+@ViewChild('bookSpot') bookModal!: ElementRef;\n // lets add ! because we dont want to initalize it\n \n   ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n@@ -61,16 +61,16 @@\n       }\n     }\n   }\n \n-  openModal() {\n+  openModal(spotNumber: number) {\n     // whenever we are dealing with the viewchild use null check\n     if(this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n   }\n \n-  closeModal(spotNumber: number) {\n+  closeModal() {\n     // whenever we are dealing with the viewchild use null check\n     if(this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n"
                },
                {
                    "date": 1752305993147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,27 +15,41 @@\n   router = inject(Router)\n   siteList: SiteData[] = []\n   buildingList: BuildingData[] = []\n   floorList: FloorData[] = []\n- dashboardService = inject(DashboardService)\n- siteId: string = ''\n- buildingId: string = ''\n- floorId: string = ''\n- parkingSpotArray: number[] = []\n+  dashboardService = inject(DashboardService)\n+  siteId: string = ''\n+  buildingId: string = ''\n+  floorId: string = ''\n+  parkingSpotArray: number[] = []\n+  bookSpotObj: any = {\n+    \"parkId\": 0,\n+    \"floorId\": 0,\n+    \"custName\": \"\",\n+    \"custMobileNo\": \"\",\n+    \"vehicleNo\": \"\",\n+    \"parkDate\": new Date(),\n+    \"parkSpotNo\": 0,\n+    \"inTime\": new Date(),\n+    \"outTime\": null,\n+    \"amount\": 0,\n+    \"extraCharge\": 0,\n+    \"parkingNo\": \"string\"\n+  }\n \n-//  in angular there are many ways to open modal but viewchild is considered to be best one\n-@ViewChild('bookSpot') bookModal!: ElementRef;\n-// lets add ! because we dont want to initalize it\n+  //  in angular there are many ways to open modal but viewchild is considered to be best one\n+  @ViewChild('bookSpot') bookModal!: ElementRef;\n+  // lets add ! because we dont want to initalize it\n \n   ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n-    this.getSites();\n-  } else {\n-    // Optionally redirect to login or show a message\n-    this.router.navigate(['/login']);\n+      this.getSites();\n+    } else {\n+      // Optionally redirect to login or show a message\n+      this.router.navigate(['/login']);\n+    }\n   }\n-  }\n-  \n+\n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n     })\n@@ -63,16 +77,16 @@\n   }\n \n   openModal(spotNumber: number) {\n     // whenever we are dealing with the viewchild use null check\n-    if(this.bookModal) {\n+    if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n   }\n \n   closeModal() {\n     // whenever we are dealing with the viewchild use null check\n-    if(this.bookModal) {\n+    if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n   }\n }\n"
                },
                {
                    "date": 1752306821245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n     }\n   }\n \n   openModal(spotNumber: number) {\n+    this.bookSpotObj.parkSpotNo = spotNumber\n     // whenever we are dealing with the viewchild use null check\n     if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n"
                },
                {
                    "date": 1752307057514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,5 +89,11 @@\n     if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n   }\n+\n+  onBookSpot() {\n+    this.dashboardService.bookSpot(this.bookSpotObj).subscibe((res: any) => {\n+alert(\"spot booked\")\n+    })\n+  }\n }\n"
                },
                {
                    "date": 1752307074021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     }\n   }\n \n   onBookSpot() {\n-    this.dashboardService.bookSpot(this.bookSpotObj).subscibe((res: any) => {\n+    this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n alert(\"spot booked\")\n     })\n   }\n }\n"
                },
                {
                    "date": 1752307314129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n   }\n \n   openModal(spotNumber: number) {\n     this.bookSpotObj.parkSpotNo = spotNumber\n+    this.bookSpotObj.floorId = this.floorId\n     // whenever we are dealing with the viewchild use null check\n     if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'block';\n     }\n"
                },
                {
                    "date": 1752307398047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,9 @@\n   }\n \n   onBookSpot() {\n     this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n-alert(\"spot booked\")\n+      alert(\"spot booked\")\n+      this.closeModal()\n     })\n   }\n }\n"
                },
                {
                    "date": 1752307765974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n     \"amount\": 0,\n     \"extraCharge\": 0,\n     \"parkingNo\": \"string\"\n   }\n+  bookedSpotList: any[] = []\n \n   //  in angular there are many ways to open modal but viewchild is considered to be best one\n   @ViewChild('bookSpot') bookModal!: ElementRef;\n   // lets add ! because we dont want to initalize it\n@@ -73,8 +74,11 @@\n       for (let index = 1; index <= floor.totalParkingSpots; index++) {\n         this.parkingSpotArray.push(index);\n       }\n     }\n+    this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n+      this.bookedSpotList = res\n+    })\n   }\n \n   openModal(spotNumber: number) {\n     this.bookSpotObj.parkSpotNo = spotNumber\n"
                },
                {
                    "date": 1752307776153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         this.parkingSpotArray.push(index);\n       }\n     }\n     this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n-      this.bookedSpotList = res\n+      this.bookedSpotList = res.data\n     })\n   }\n \n   openModal(spotNumber: number) {\n"
                },
                {
                    "date": 1752307812333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,12 @@\n       for (let index = 1; index <= floor.totalParkingSpots; index++) {\n         this.parkingSpotArray.push(index);\n       }\n     }\n+    this.getBooking()\n+    \n+  }\n+  getBooking() {\n     this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n       this.bookedSpotList = res.data\n     })\n   }\n"
                },
                {
                    "date": 1752307848575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,6 +104,7 @@\n     this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n       alert(\"spot booked\")\n       this.closeModal()\n     })\n+    this.getBooking()\n   }\n }\n"
                },
                {
                    "date": 1752308179075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n import { FormsModule } from '@angular/forms';\n import { Router } from '@angular/router';\n+import { NgClass } from '@angular/common';\n \n @Component({\n   selector: 'app-dashboard',\n-  imports: [FormsModule],\n+  imports: [FormsModule, NgClass],\n   templateUrl: './dashboard.component.html',\n   styleUrl: './dashboard.component.css'\n })\n export class DashboardComponent implements OnInit {\n"
                },
                {
                    "date": 1752308631769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,13 @@\n import { DashboardService } from '../../services/dashboard/dashboard.service';\n import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n import { FormsModule } from '@angular/forms';\n import { Router } from '@angular/router';\n-import { NgClass } from '@angular/common';\n+import { NgIf } from '@angular/common';\n \n @Component({\n   selector: 'app-dashboard',\n-  imports: [FormsModule, NgClass],\n+  imports: [FormsModule, NgIf],\n   templateUrl: './dashboard.component.html',\n   styleUrl: './dashboard.component.css'\n })\n export class DashboardComponent implements OnInit {\n"
                },
                {
                    "date": 1752308994053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,17 @@\n       this.router.navigate(['/login']);\n     }\n   }\n \n+  checkIfSpotBooked(spotNo: number) {\n+    const isExist = this.bookedSpotList.find((m: any) => m.parkSpotNo == spotNo)\n+    if(isExist != undefined) {\n+      return isExist\n+    } else {\n+      return undefined;\n+    }\n+  }\n+\n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n     })\n"
                },
                {
                    "date": 1752309828957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,10 @@\n     })\n   }\n \n   getBuildings() {\n+    this.parkingSpotArray = []\n+    this.floorList = []\n     this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: any) => {\n       this.buildingList = res.data\n     })\n   }\n"
                },
                {
                    "date": 1752310044255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n     this.getBooking()\n     \n   }\n   getBooking() {\n+    alert(this.floorId)\n     this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n       this.bookedSpotList = res.data\n     })\n   }\n"
                },
                {
                    "date": 1752310426140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,16 @@\n       return undefined;\n     }\n   }\n \n+  onBookSpot() {\n+    this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n+      alert(\"spot booked\")\n+      this.getBooking()\n+      this.closeModal()\n+    })\n+  }\n+\n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n     })\n@@ -111,13 +119,5 @@\n     if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n   }\n-\n-  onBookSpot() {\n-    this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n-      alert(\"spot booked\")\n-      this.closeModal()\n-    })\n-    this.getBooking()\n-  }\n }\n"
                },
                {
                    "date": 1752310609918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,10 @@\n     })\n   }\n \n   getFloors() {\n+    this.parkingSpotArray = []\n+    this.floorList = []\n     this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: any) => {\n       this.floorList = res.data\n     })\n   }\n"
                },
                {
                    "date": 1752310878931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n \n   //  in angular there are many ways to open modal but viewchild is considered to be best one\n   @ViewChild('bookSpot') bookModal!: ElementRef;\n   // lets add ! because we dont want to initalize it\n+  @ViewChild('releaseSpot') releaseModal !: ElementRef;\n \n   ngOnInit() {\n     if (this.dashboardService.loginService.loggedUserData) {\n       this.getSites();\n"
                },
                {
                    "date": 1752311833290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,14 @@\n     \"amount\": 0,\n     \"extraCharge\": 0,\n     \"parkingNo\": \"string\"\n   }\n+\n+  markExitObj: any =  {\n+  \"parkId\": 0,\n+  \"outTime\": new Date(),\n+  \"extraCharge\": 0\n+}\n   bookedSpotList: any[] = []\n \n   //  in angular there are many ways to open modal but viewchild is considered to be best one\n   @ViewChild('bookSpot') bookModal!: ElementRef;\n@@ -62,14 +68,20 @@\n   }\n \n   onBookSpot() {\n     this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n-      alert(\"spot booked\")\n       this.getBooking()\n       this.closeModal()\n     })\n   }\n \n+  onExitCar() {\n+    this.dashboardService.releaseSpot(this.markExitObj).subscribe((res: any) => {\n+      this.getBooking()\n+      this.closeModal()\n+    })\n+  }\n+\n   getSites() {\n     this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n       this.siteList = res.data\n     })\n@@ -122,5 +134,22 @@\n     if (this.bookModal) {\n       this.bookModal.nativeElement.style.display = 'none';\n     }\n   }\n+\n+  openReleaseModal(parkId: number) {\n+    this.markExitObj.parkId = parkId\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.releaseModal) {\n+      this.releaseModal.nativeElement.style.display = 'block';\n+    }\n+  }\n+\n+  closeReleaseModal() {\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.releaseModal) {\n+      this.releaseModal.nativeElement.style.display = 'none';\n+    }\n+  }\n+\n+\n }\n"
                },
                {
                    "date": 1752312126034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import { Component, ElementRef, inject, OnInit, ViewChild } from '@angular/core';\n+import { DashboardService } from '../../services/dashboard/dashboard.service';\n+import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n+import { FormsModule } from '@angular/forms';\n+import { Router } from '@angular/router';\n+import { NgIf } from '@angular/common';\n+\n+@Component({\n+  selector: 'app-dashboard',\n+  imports: [FormsModule, NgIf],\n+  templateUrl: './dashboard.component.html',\n+  styleUrl: './dashboard.component.css'\n+})\n+export class DashboardComponent implements OnInit {\n+\n+  router = inject(Router)\n+  siteList: SiteData[] = []\n+  buildingList: BuildingData[] = []\n+  floorList: FloorData[] = []\n+  dashboardService = inject(DashboardService)\n+  siteId: string = ''\n+  buildingId: string = ''\n+  floorId: string = ''\n+  parkingSpotArray: number[] = []\n+  bookSpotObj: any = {\n+    \"parkId\": 0,\n+    \"floorId\": 0,\n+    \"custName\": \"\",\n+    \"custMobileNo\": \"\",\n+    \"vehicleNo\": \"\",\n+    \"parkDate\": new Date(),\n+    \"parkSpotNo\": 0,\n+    \"inTime\": new Date(),\n+    \"outTime\": null,\n+    \"amount\": 0,\n+    \"extraCharge\": 0,\n+    \"parkingNo\": \"string\"\n+  }\n+\n+  markExitObj: any =  {\n+  \"parkId\": 0,\n+  \"outTime\": new Date(),\n+  \"extraCharge\": 0\n+}\n+  bookedSpotList: any[] = []\n+\n+  //  in angular there are many ways to open modal but viewchild is considered to be best one\n+  @ViewChild('bookSpot') bookModal!: ElementRef;\n+  // lets add ! because we dont want to initalize it\n+  @ViewChild('releaseSpot') releaseModal !: ElementRef;\n+\n+  ngOnInit() {\n+    if (this.dashboardService.loginService.loggedUserData) {\n+      this.getSites();\n+    } else {\n+      // Optionally redirect to login or show a message\n+      this.router.navigate(['/login']);\n+    }\n+  }\n+\n+  checkIfSpotBooked(spotNo: number) {\n+    const isExist = this.bookedSpotList.find((m: any) => m.parkSpotNo == spotNo && m.outTime == null)\n+    if(isExist != undefined) {\n+      return isExist\n+    } else {\n+      return undefined;\n+    }\n+  }\n+\n+  onBookSpot() {\n+    this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n+      this.getBooking()\n+      this.closeModal()\n+    })\n+  }\n+\n+  onExitCar() {\n+    this.dashboardService.releaseSpot(this.markExitObj).subscribe((res: any) => {\n+      this.getBooking()\n+      this.closeModal()\n+    })\n+  }\n+\n+  getSites() {\n+    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n+      this.siteList = res.data\n+    })\n+  }\n+\n+  getBuildings() {\n+    this.parkingSpotArray = []\n+    this.floorList = []\n+    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: any) => {\n+      this.buildingList = res.data\n+    })\n+  }\n+\n+  getFloors() {\n+    this.parkingSpotArray = []\n+    this.floorList = []\n+    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: any) => {\n+      this.floorList = res.data\n+    })\n+  }\n+\n+  onSelectFloor() {\n+    const floor = this.floorList.find((m: any) => m.floorId == this.floorId);\n+    if (floor) {\n+      for (let index = 1; index <= floor.totalParkingSpots; index++) {\n+        this.parkingSpotArray.push(index);\n+      }\n+    }\n+    this.getBooking()\n+    \n+  }\n+  getBooking() {\n+    alert(this.floorId)\n+    this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n+      this.bookedSpotList = res.data\n+    })\n+  }\n+\n+  openModal(spotNumber: number) {\n+    this.bookSpotObj.parkSpotNo = spotNumber\n+    this.bookSpotObj.floorId = this.floorId\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.bookModal) {\n+      this.bookModal.nativeElement.style.display = 'block';\n+    }\n+  }\n+\n+  closeModal() {\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.bookModal) {\n+      this.bookModal.nativeElement.style.display = 'none';\n+    }\n+  }\n+\n+  openReleaseModal(parkId: number) {\n+    this.markExitObj.parkId = parkId\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.releaseModal) {\n+      this.releaseModal.nativeElement.style.display = 'block';\n+    }\n+  }\n+\n+  closeReleaseModal() {\n+    // whenever we are dealing with the viewchild use null check\n+    if (this.releaseModal) {\n+      this.releaseModal.nativeElement.style.display = 'none';\n+    }\n+  }\n+\n+\n+}\n"
                },
                {
                    "date": 1752312194333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n \n   onExitCar() {\n     this.dashboardService.releaseSpot(this.markExitObj).subscribe((res: any) => {\n       this.getBooking()\n-      this.closeModal()\n+      this.closeReleaseModal()\n     })\n   }\n \n   getSites() {\n@@ -152,159 +152,4 @@\n   }\n \n \n }\n-import { Component, ElementRef, inject, OnInit, ViewChild } from '@angular/core';\n-import { DashboardService } from '../../services/dashboard/dashboard.service';\n-import { BuildingData, FloorData, ResponseModel, SiteData } from '../../models/login.model';\n-import { FormsModule } from '@angular/forms';\n-import { Router } from '@angular/router';\n-import { NgIf } from '@angular/common';\n-\n-@Component({\n-  selector: 'app-dashboard',\n-  imports: [FormsModule, NgIf],\n-  templateUrl: './dashboard.component.html',\n-  styleUrl: './dashboard.component.css'\n-})\n-export class DashboardComponent implements OnInit {\n-\n-  router = inject(Router)\n-  siteList: SiteData[] = []\n-  buildingList: BuildingData[] = []\n-  floorList: FloorData[] = []\n-  dashboardService = inject(DashboardService)\n-  siteId: string = ''\n-  buildingId: string = ''\n-  floorId: string = ''\n-  parkingSpotArray: number[] = []\n-  bookSpotObj: any = {\n-    \"parkId\": 0,\n-    \"floorId\": 0,\n-    \"custName\": \"\",\n-    \"custMobileNo\": \"\",\n-    \"vehicleNo\": \"\",\n-    \"parkDate\": new Date(),\n-    \"parkSpotNo\": 0,\n-    \"inTime\": new Date(),\n-    \"outTime\": null,\n-    \"amount\": 0,\n-    \"extraCharge\": 0,\n-    \"parkingNo\": \"string\"\n-  }\n-\n-  markExitObj: any =  {\n-  \"parkId\": 0,\n-  \"outTime\": new Date(),\n-  \"extraCharge\": 0\n-}\n-  bookedSpotList: any[] = []\n-\n-  //  in angular there are many ways to open modal but viewchild is considered to be best one\n-  @ViewChild('bookSpot') bookModal!: ElementRef;\n-  // lets add ! because we dont want to initalize it\n-  @ViewChild('releaseSpot') releaseModal !: ElementRef;\n-\n-  ngOnInit() {\n-    if (this.dashboardService.loginService.loggedUserData) {\n-      this.getSites();\n-    } else {\n-      // Optionally redirect to login or show a message\n-      this.router.navigate(['/login']);\n-    }\n-  }\n-\n-  checkIfSpotBooked(spotNo: number) {\n-    const isExist = this.bookedSpotList.find((m: any) => m.parkSpotNo == spotNo)\n-    if(isExist != undefined) {\n-      return isExist\n-    } else {\n-      return undefined;\n-    }\n-  }\n-\n-  onBookSpot() {\n-    this.dashboardService.bookSpot(this.bookSpotObj).subscribe((res: any) => {\n-      this.getBooking()\n-      this.closeModal()\n-    })\n-  }\n-\n-  onExitCar() {\n-    this.dashboardService.releaseSpot(this.markExitObj).subscribe((res: any) => {\n-      this.getBooking()\n-      this.closeModal()\n-    })\n-  }\n-\n-  getSites() {\n-    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n-      this.siteList = res.data\n-    })\n-  }\n-\n-  getBuildings() {\n-    this.parkingSpotArray = []\n-    this.floorList = []\n-    this.dashboardService.getBuildingsBySiteId(this.siteId).subscribe((res: any) => {\n-      this.buildingList = res.data\n-    })\n-  }\n-\n-  getFloors() {\n-    this.parkingSpotArray = []\n-    this.floorList = []\n-    this.dashboardService.getFloorsByBuildingId(this.buildingId).subscribe((res: any) => {\n-      this.floorList = res.data\n-    })\n-  }\n-\n-  onSelectFloor() {\n-    const floor = this.floorList.find((m: any) => m.floorId == this.floorId);\n-    if (floor) {\n-      for (let index = 1; index <= floor.totalParkingSpots; index++) {\n-        this.parkingSpotArray.push(index);\n-      }\n-    }\n-    this.getBooking()\n-    \n-  }\n-  getBooking() {\n-    alert(this.floorId)\n-    this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n-      this.bookedSpotList = res.data\n-    })\n-  }\n-\n-  openModal(spotNumber: number) {\n-    this.bookSpotObj.parkSpotNo = spotNumber\n-    this.bookSpotObj.floorId = this.floorId\n-    // whenever we are dealing with the viewchild use null check\n-    if (this.bookModal) {\n-      this.bookModal.nativeElement.style.display = 'block';\n-    }\n-  }\n-\n-  closeModal() {\n-    // whenever we are dealing with the viewchild use null check\n-    if (this.bookModal) {\n-      this.bookModal.nativeElement.style.display = 'none';\n-    }\n-  }\n-\n-  openReleaseModal(parkId: number) {\n-    this.markExitObj.parkId = parkId\n-    // whenever we are dealing with the viewchild use null check\n-    if (this.releaseModal) {\n-      this.releaseModal.nativeElement.style.display = 'block';\n-    }\n-  }\n-\n-  closeReleaseModal() {\n-    // whenever we are dealing with the viewchild use null check\n-    if (this.releaseModal) {\n-      this.releaseModal.nativeElement.style.display = 'none';\n-    }\n-  }\n-\n-\n-}\n"
                },
                {
                    "date": 1752312306404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,11 @@\n     })\n   }\n \n   onSelectFloor() {\n+    this.parkingSpotArray = []\n+    this.floorList = []\n+    this.bookedSpotList = []\n     const floor = this.floorList.find((m: any) => m.floorId == this.floorId);\n     if (floor) {\n       for (let index = 1; index <= floor.totalParkingSpots; index++) {\n         this.parkingSpotArray.push(index);\n"
                },
                {
                    "date": 1752312323729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,8 @@\n   }\n \n   onSelectFloor() {\n     this.parkingSpotArray = []\n-    this.floorList = []\n     this.bookedSpotList = []\n     const floor = this.floorList.find((m: any) => m.floorId == this.floorId);\n     if (floor) {\n       for (let index = 1; index <= floor.totalParkingSpots; index++) {\n"
                },
                {
                    "date": 1752312464964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,8 @@\n     this.getBooking()\n     \n   }\n   getBooking() {\n-    alert(this.floorId)\n     this.dashboardService.getAllParkingByFloor(this.floorId).subscribe((res: any) => {\n       this.bookedSpotList = res.data\n     })\n   }\n"
                }
            ],
            "date": 1751612868169,
            "name": "Commit-0",
            "content": "import { Component, inject, OnInit } from '@angular/core';\nimport { DashboardService } from '../../services/dashboard/dashboard.service';\nimport { ResponseModel } from '../../models/login.model';\n\n@Component({\n  selector: 'app-dashboard',\n  imports: [],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.css'\n})\nexport class DashboardComponent implements OnInit {\n\n dashboardService = inject(DashboardService)\n\n  ngOnInit(): void {\n  }\n  \n  getSites() {\n    this.dashboardService.getSitesByClientId().subscribe((res: ResponseModel) => {\n\n    })\n  }\n}\n"
        }
    ]
}